{
  "apiVersion": "v1",
  "items": [
    {
      "apiVersion": "v1",
      "data": {
        "Dockerfile": "\n\n\nFROM docker.medium.build/base:buster\n\nLABEL tag=\"main-20250430-151034-b4c52cd0cf\" timestamp=\"2025-04-30T15:10:34Z\" app=\"echo\" ref=\"main\" commit=\"b4c52cd0cf7e0ca666a13e807ae22cc57a0966e3\"\n\nRUN echo '#!/bin/sh\\n\\\n\\n\\\nstart=$(date +%s)\\n\\\ndeadline=$(( ${start} + ${NETWORK_STARTUP_TIMEOUT:-300} ))\\n\\\n\\n\\\nif [ -z \"${DISABLE_ISTIO_READY_CHECK}\" ]; then\\n\\\n  while [ \"$(date +%s)\" -lt \"${deadline}\" ]; do\\n\\\n\techo \"Testing istio readiness\"\\n\\\n\thttp_code=\"$(curl --max-time 1 --silent --output /dev/null --write-out \"%{http_code}\" http://localhost:15000/ready)\"\\n\\\n\tif [ \"${http_code}\" -eq \"200\" ]; then\\n\\\n\t\telapsed=$(( $(date +%s) - ${start} ))\\n\\\n\t\techo \"Executing service \\\"$@\\\" after ${elapsed} seconds\"\\n\\\n\t    exec $@\\n\\\n\tfi\\n\\\n\tsleep 1\\n\\\n  done\\n\\\nelse\\n\\\n  echo \"Skipping Istio check, executing service \\\"$@\\\" now\"\\n\\\n  exec $@\\n\\\nfi\\n\\\n\\n\\\necho \"Network timeout starting container\"\\n\\\nexit 1\\n\\\n' >> /usr/local/bin/entrypoint && chmod +x /usr/local/bin/entrypoint\nENTRYPOINT [\"/usr/local/bin/entrypoint\"]\n\nCOPY ./image /opt/echo/\nCOPY ./package/meta /etc/kbfd/\n\nWORKDIR /opt/echo\nENV PATH=/opt/echo/bin:$PATH\nCMD [\"/opt/echo/bin/echo\"]\n",
        "app.yml": "apiVersion: kbfd.medium.build/v1alpha1\nkind: App\nmetadata:\n  description: Simple echo service, used to establish a performance baseline\n  name: echo\n  team: Core Platform\nspec:\n  build:\n    aws:\n      iam: {}\n    canary:\n      percent: 0\n      ttl: 0\n    datadog: {}\n    go:\n      baseImage: docker.medium.build/base\n      command:\n      - /opt/echo/bin/echo\n      entrypoint:\n        waitForNetwork:\n          enabled: true\n      linux:\n        distro: debian\n        version: buster\n      package: go/cmd/echo\n      version: \"1.22\"\n    istioSidecar:\n      egressListenerHosts: null\n      envoyPreStopGracePeriodSeconds: 40\n    pipeline: {}\n    probes: {}\n    resources:\n      limits:\n        cpu: \"4\"\n        memory: 4Gi\n      requests:\n        cpu: \"4\"\n        memory: 4Gi\n    scale: {}\n    source: {}\n    task: true\n    termination:\n      podTerminationGracePeriodSeconds: 60\n      preStopGracePeriodSeconds: 20\n    timeout: 15m0s\n    world: delivery\n  defaults:\n    aws:\n      iam: {}\n    canary:\n      percent: 0\n      ttl: 0\n    datadog:\n      scrapePrometheus: true\n    istioSidecar:\n      egressListenerHosts:\n      - ./*\n      envoyPreStopGracePeriodSeconds: 40\n    podDisruptionBudget:\n      metadata:\n        creationTimestamp: null\n      spec:\n        maxUnavailable: 1\n      status:\n        currentHealthy: 0\n        desiredHealthy: 0\n        disruptionsAllowed: 0\n        expectedPods: 0\n    probes:\n      httpGet:\n        path: /\n        port: http\n      initialDelaySeconds: 5\n      periodSeconds: 5\n      timeoutSeconds: 2\n    resources:\n      limits:\n        memory: 64Mi\n      requests:\n        cpu: 10m\n        memory: 32Mi\n    scale:\n      targetCPUUtilizationPercentage: 95\n    termination:\n      podTTL: 168h0m0s\n  deploy:\n    agent: picchu\n  dev:\n    aws:\n      iam: {}\n    canary:\n      percent: 0\n      ttl: 0\n    datadog: {}\n    env:\n    - name: LOG_JSON\n      value: \"false\"\n    - name: LOG_VERBOSE\n      value: \"true\"\n    istioSidecar:\n      egressListenerHosts: null\n      envoyPreStopGracePeriodSeconds: 40\n    probes: {}\n    resources: {}\n    run:\n      command: ./echo\n      prepare:\n      - make deps generate\n      - make build\n      workingDir: go/cmd/echo\n    scale: {}\n    termination:\n      podTerminationGracePeriodSeconds: 60\n      preStopGracePeriodSeconds: 20\n    world: development\n  ports:\n  - containerPort: 8080\n    ingresses:\n    - public\n    - private\n    istio:\n      http:\n        retries:\n          attempts: 2\n          perTryTimeout: 3s\n          retryOn: 5xx\n        timeout: 3s\n    mode: \"\"\n    name: http\n    port: 80\n    protocol: TCP\n    trafficPolicy:\n      connectionPool:\n        http:\n          h2UpgradePolicy: UPGRADE\n  - containerPort: 8081\n    istio:\n      http:\n        retries:\n          attempts: 1\n    mode: private\n    name: grpc\n    port: 81\n    protocol: TCP\n  - containerPort: 8082\n    istio:\n      http:\n        retries:\n          attempts: 2\n    mode: local\n    name: status\n    port: 4242\n    protocol: TCP\n    trafficPolicy:\n      connectionPool:\n        http:\n          http2MaxRequests: 10\n  services: {}\n  targets:\n  - aws:\n      iam: {}\n    branches:\n    - main\n    canary:\n      percent: 0\n      ttl: 0\n    datadog: {}\n    datadogSLO: {}\n    defaultIngressPorts:\n      private: http\n      public: http\n    experimental:\n      enableEgressGateway: true\n    fleet: delivery\n    istioSidecar:\n      egressListenerHosts: null\n    metadata:\n      links: null\n    name: delivery\n    nodeGroup: {}\n    ports:\n    - containerPort: 8080\n      hosts:\n      - echo.medium.build\n      ingresses:\n      - public\n      - private\n      istio:\n        http:\n          retries:\n            attempts: 2\n            perTryTimeout: 3s\n            retryOn: 5xx\n          timeout: 3s\n      mode: \"\"\n      name: http\n      port: 80\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            h2UpgradePolicy: UPGRADE\n    - containerPort: 8081\n      hosts:\n      - echo-grpc.delivery.medm.cloud\n      istio:\n        http:\n          retries:\n            attempts: 1\n      mode: private\n      name: grpc\n      port: 81\n      protocol: TCP\n    - containerPort: 8082\n      istio:\n        http:\n          retries:\n            attempts: 2\n      mode: local\n      name: status\n      port: 4242\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            http2MaxRequests: 10\n    probes: {}\n    release:\n      geometricScaling:\n        delay: 1m0s\n        factor: 2\n        start: 13\n      linearScaling: {}\n      scalingStrategy: geometric\n      schedule: always\n    resources: {}\n    scale:\n      max: 2\n      min: 2\n    serviceMonitorConfig: {}\n    serviceMonitors:\n    - labels:\n        prometheus: cluster\n      name: delivery-cluster\n      sloRegex: false\n      spec:\n        endpoints:\n        - interval: 30s\n          port: status\n          relabelings:\n          - sourceLabels:\n            - __meta_kubernetes_pod_label_picchu_medium_engineering_tag\n            targetLabel: tag\n        namespaceSelector: {}\n        selector:\n          matchLabels:\n            prometheus.io/scrape: \"true\"\n    slo:\n      alertConfig:\n        canary: {}\n        errorBudget: {}\n      labels: {}\n    termination: {}\n    test:\n      app: hermit\n      tag: latest\n    world: delivery\n  - aws:\n      iam: {}\n    branches:\n    - main\n    canary:\n      percent: 0\n      ttl: 0\n    datadog: {}\n    datadogSLO: {}\n    defaultIngressPorts:\n      private: http\n      public: http\n    experimental:\n      enableEgressGateway: true\n    fleet: internal\n    istioSidecar:\n      egressListenerHosts: null\n    metadata:\n      links: null\n    name: internal\n    nodeGroup: {}\n    ports:\n    - containerPort: 8080\n      hosts:\n      - echo.medium.run\n      ingresses:\n      - public\n      - private\n      istio:\n        http:\n          retries:\n            attempts: 2\n            perTryTimeout: 3s\n            retryOn: 5xx\n          timeout: 3s\n      mode: \"\"\n      name: http\n      port: 80\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            h2UpgradePolicy: UPGRADE\n    - containerPort: 8081\n      hosts:\n      - echo-grpc.internal.medm.cloud\n      istio:\n        http:\n          retries:\n            attempts: 1\n      mode: private\n      name: grpc\n      port: 81\n      protocol: TCP\n    - containerPort: 8082\n      istio:\n        http:\n          retries:\n            attempts: 2\n      mode: local\n      name: status\n      port: 4242\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            http2MaxRequests: 10\n    probes: {}\n    release:\n      geometricScaling:\n        delay: 1m0s\n        factor: 2\n        start: 13\n      linearScaling: {}\n      scalingStrategy: geometric\n      schedule: always\n    resources: {}\n    scale:\n      max: 2\n      min: 2\n    serviceMonitorConfig: {}\n    serviceMonitors:\n    - labels:\n        prometheus: cluster\n      name: internal-cluster\n      sloRegex: false\n      spec:\n        endpoints:\n        - interval: 30s\n          port: status\n          relabelings:\n          - sourceLabels:\n            - __meta_kubernetes_pod_label_picchu_medium_engineering_tag\n            targetLabel: tag\n        namespaceSelector: {}\n        selector:\n          matchLabels:\n            prometheus.io/scrape: \"true\"\n    slo:\n      alertConfig:\n        canary: {}\n        errorBudget: {}\n      labels: {}\n    termination: {}\n    test:\n      app: hermit\n      tag: latest\n    world: ensign\n  - aws:\n      iam: {}\n    branches:\n    - main\n    canary:\n      percent: 0\n      ttl: 0\n    datadog: {}\n    datadogSLO: {}\n    experimental:\n      enableEgressGateway: true\n    fleet: sandbox\n    istioSidecar:\n      egressListenerHosts: null\n    metadata:\n      links: null\n    name: sandbox\n    nodeGroup: {}\n    ports:\n    - containerPort: 8080\n      hosts:\n      - echo.medium.sh\n      - echo.medium.dev\n      ingresses:\n      - public\n      - private\n      istio:\n        http:\n          retries:\n            attempts: 2\n            perTryTimeout: 3s\n            retryOn: 5xx\n          timeout: 3s\n      mode: \"\"\n      name: http\n      port: 80\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            h2UpgradePolicy: UPGRADE\n    - containerPort: 8081\n      hosts:\n      - echo-grpc.sandbox.medm.cloud\n      istio:\n        http:\n          retries:\n            attempts: 1\n      mode: private\n      name: grpc\n      port: 81\n      protocol: TCP\n    - containerPort: 8082\n      istio:\n        http:\n          retries:\n            attempts: 2\n      mode: local\n      name: status\n      port: 4242\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            http2MaxRequests: 10\n    probes: {}\n    release:\n      geometricScaling:\n        delay: 1m0s\n        factor: 2\n        start: 13\n      linearScaling: {}\n      scalingStrategy: geometric\n      schedule: always\n    resources: {}\n    scale:\n      max: 2\n      min: 2\n    serviceMonitorConfig: {}\n    serviceMonitors:\n    - labels:\n        prometheus: cluster\n      name: sandbox-cluster\n      sloRegex: false\n      spec:\n        endpoints:\n        - interval: 30s\n          port: status\n          relabelings:\n          - sourceLabels:\n            - __meta_kubernetes_pod_label_picchu_medium_engineering_tag\n            targetLabel: tag\n        namespaceSelector: {}\n        selector:\n          matchLabels:\n            prometheus.io/scrape: \"true\"\n    slo:\n      alertConfig:\n        canary: {}\n        errorBudget: {}\n      labels: {}\n    termination: {}\n    test:\n      app: hermit\n      tag: latest\n    world: development\n  - aws:\n      iam: {}\n    branches:\n    - main\n    canary:\n      percent: 30\n      ttl: 900\n    datadog: {}\n    datadogSLO: {}\n    experimental:\n      enableEgressGateway: true\n    fleet: production\n    istioSidecar:\n      egressListenerHosts: null\n    metadata:\n      links: null\n    name: production\n    nodeGroup: {}\n    ports:\n    - containerPort: 8080\n      hosts:\n      - echo.medium.systems\n      ingresses:\n      - public\n      - private\n      istio:\n        http:\n          retries:\n            attempts: 2\n            perTryTimeout: 3s\n            retryOn: 5xx\n          timeout: 3s\n      mode: \"\"\n      name: http\n      port: 80\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            h2UpgradePolicy: UPGRADE\n    - containerPort: 8081\n      hosts:\n      - echo-grpc.production.medm.cloud\n      istio:\n        http:\n          retries:\n            attempts: 1\n      mode: private\n      name: grpc\n      port: 81\n      protocol: TCP\n    - containerPort: 8082\n      istio:\n        http:\n          retries:\n            attempts: 2\n      mode: local\n      name: status\n      port: 4242\n      protocol: TCP\n      trafficPolicy:\n        connectionPool:\n          http:\n            http2MaxRequests: 10\n    priorityClassName: low-priority\n    probes: {}\n    release:\n      geometricScaling:\n        delay: 1m0s\n        factor: 2\n        start: 13\n      linearScaling: {}\n      scalingStrategy: geometric\n      schedule: always\n    resources: {}\n    scale:\n      max: 8\n      min: 4\n    serviceMonitorConfig: {}\n    serviceMonitors:\n    - labels:\n        prometheus: cluster\n      name: production-cluster\n      sloRegex: true\n      spec:\n        endpoints:\n        - interval: 30s\n          metricRelabelings:\n          - action: drop\n            sourceLabels:\n            - __name__\n          port: status\n          relabelings:\n          - sourceLabels:\n            - __meta_kubernetes_pod_label_picchu_medium_engineering_tag\n            targetLabel: tag\n        namespaceSelector: {}\n        selector:\n          matchLabels:\n            prometheus.io/scrape: \"true\"\n    - labels:\n        prometheus: slo\n      name: production-slo\n      sloRegex: true\n      spec:\n        endpoints:\n        - interval: 30s\n          metricRelabelings:\n          - action: keep\n            sourceLabels:\n            - __name__\n          port: status\n          relabelings:\n          - sourceLabels:\n            - __meta_kubernetes_pod_label_picchu_medium_engineering_tag\n            targetLabel: tag\n        namespaceSelector: {}\n        selector:\n          matchLabels:\n            prometheus.io/scrape: \"true\"\n    slo:\n      alertConfig:\n        canary:\n          channel: '#eng-releases'\n        errorBudget:\n          channel: '#eng-watch-alerts'\n          team: core-platform\n      labels:\n        alertLabels:\n          channel: '#eng-watch-alerts'\n          severity: slack\n        serviceLevelLabels:\n          channel: '#eng-watch-alerts'\n          team: core-platform\n      objectives:\n      - alerting:\n          labels:\n            channel: '#eng-watch-alerts'\n            severity: slack\n          name: istio-http-availability\n          pageAlert:\n            labels:\n              channel: '#eng-watch-alerts'\n              severity: slack\n          ticketAlert:\n            disable: true\n        description: 99.9% of istio http requests must be successful.\n        enabled: true\n        name: istio-http-availability\n        objectivePercent: 99.9\n        serviceLevelIndicator:\n          alertAfter: 5m\n          canary:\n            allowancePercent: 1\n            enabled: true\n            failAfter: 2m\n          errorQuery: sum(rate(istio_requests_total{reporter=\"source\", destination_service=\"echo.echo-production.svc.cluster.local\",\n            response_code!~\"[234][0-9]{2}\"}[2m])) by (tag)\n          tagKey: tag\n          totalQuery: sum(rate(istio_requests_total{reporter=\"source\", destination_service=\"echo.echo-production.svc.cluster.local\"}[2m]))\n            by (tag)\n        serviceLevelObjectiveLabels: {}\n      - alerting:\n          labels:\n            channel: '#eng-watch-alerts'\n            severity: slack\n          name: http-availability\n          pageAlert:\n            labels:\n              channel: '#eng-watch-alerts'\n              severity: slack\n          ticketAlert:\n            disable: true\n        description: 99.9% of http requests must be successful.\n        enabled: true\n        name: http-availability\n        objectivePercent: 99.9\n        serviceLevelIndicator:\n          alertAfter: 5m\n          canary:\n            allowancePercent: 1\n            enabled: true\n            failAfter: 2m\n          errorQuery: sum(rate(echo_errors[2m])) by (tag)\n          tagKey: tag\n          totalQuery: sum(rate(echo_requests[2m])) by (tag)\n        serviceLevelObjectiveLabels: {}\n    termination: {}\n    test:\n      app: hermit\n      tag: latest\n    world: medium-com\n  trigger:\n    paths:\n    - go/cmd/echo\n    - go/pkg/log\n    - go/dev/check_deps\n    - go/dev/protogen\n    - go/pkg/config\n    - go/pkg/legacy/errors\n    - go/pkg/legacy/go.mod\n    - go/pkg/legacy/go.sum\n    - go/pkg/legacy/log\n    - go/pkg/legacy/metrics\n    - go/pkg/legacy/session\n    - go/pkg/legacy/status\n    - go/pkg/strings\n    - go/shared.mk\n    - proto/iceland\n    - proto/infra/echo\n    - proto/model\n    - proto/obv\n    - proto/options/api.proto\n    - proto/options/redis.proto\n    - proto/scalapb\n    - go/pkg/daemon\n    - go/pkg/grpc\n    - go/pkg/tracer/go.mod\n    - go/pkg/tracer/go.sum\n    - go/pkg/tracer/v2\n",
        "image.json": "{\n  \"name\": \"docker.medium.build/echo:main-20250430-151034-b4c52cd0cf\",\n  \"app\": \"echo\",\n  \"tag\": \"main-20250430-151034-b4c52cd0cf\",\n  \"repository\": \"Medium/mono\",\n  \"ref\": \"main\",\n  \"commit\": \"b4c52cd0cf7e0ca666a13e807ae22cc57a0966e3\",\n  \"author\": \"AudreyBosdeveix\",\n  \"kbfd_channel\": \"production\",\n  \"timestamp\": \"2025-04-30T15:10:34.52050853Z\"\n}\n"
      },
      "kind": "ConfigMap",
      "metadata": {
        "annotations": {
          "git-scm.com/committer-timestamp": "2025-04-30T14:50:30Z",
          "git-scm.com/ref": "main",
          "github.com/repository": "Medium/mono"
        },
        "labels": {
          "app.kubernetes.io/managed-by": "kbfd",
          "config.kbfd.medium.build/type": "inputs",
          "kbfd.medium.build/role": "config",
          "medium.build/app": "echo",
          "medium.build/author": "AudreyBosdeveix",
          "medium.build/commit": "b4c52cd0cf7e0ca666a13e807ae22cc57a0966e3",
          "medium.build/tag": "main-20250430-151034-b4c52cd0cf"
        },
        "name": "echo-main-20250430-151034-b4c52cd0cf-inputs",
        "namespace": "build"
      }
    }
  ],
  "kind": "List",
  "metadata": {
    "resourceVersion": ""
  }
}
