// Code generated by MockGen. DO NOT EDIT.
// Source: go.medium.engineering/picchu/datadog (interfaces: DatadogAPI)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=prometheus/mocks/mock_datadogapi.go -package=mocks go.medium.engineering/picchu/datadog DatadogAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadogV1 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV1"
	gomock "go.uber.org/mock/gomock"
)

// MockDatadogAPI is a mock of DatadogAPI interface.
type MockDatadogAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDatadogAPIMockRecorder
}

// MockDatadogAPIMockRecorder is the mock recorder for MockDatadogAPI.
type MockDatadogAPIMockRecorder struct {
	mock *MockDatadogAPI
}

// NewMockDatadogAPI creates a new mock instance.
func NewMockDatadogAPI(ctrl *gomock.Controller) *MockDatadogAPI {
	mock := &MockDatadogAPI{ctrl: ctrl}
	mock.recorder = &MockDatadogAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatadogAPI) EXPECT() *MockDatadogAPIMockRecorder {
	return m.recorder
}

// ListMonitors mocks base method.
func (m *MockDatadogAPI) ListMonitors(arg0 context.Context, arg1 ...datadogV1.ListMonitorsOptionalParameters) ([]datadogV1.Monitor, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMonitors", varargs...)
	ret0, _ := ret[0].([]datadogV1.Monitor)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMonitors indicates an expected call of ListMonitors.
func (mr *MockDatadogAPIMockRecorder) ListMonitors(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockDatadogAPI)(nil).ListMonitors), varargs...)
}

// SearchMonitors mocks base method.
func (m *MockDatadogAPI) SearchMonitors(arg0 context.Context, arg1 ...datadogV1.SearchMonitorsOptionalParameters) (datadogV1.MonitorSearchResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMonitors", varargs...)
	ret0, _ := ret[0].(datadogV1.MonitorSearchResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMonitors indicates an expected call of SearchMonitors.
func (mr *MockDatadogAPIMockRecorder) SearchMonitors(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMonitors", reflect.TypeOf((*MockDatadogAPI)(nil).SearchMonitors), varargs...)
}
