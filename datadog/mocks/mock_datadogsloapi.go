// Code generated by MockGen. DO NOT EDIT.
// Source: go.medium.engineering/picchu/datadog (interfaces: DatadogSLOAPI)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=datadog/mocks/mock_datadogsloapi.go -package=mocks go.medium.engineering/picchu/datadog DatadogSLOAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	datadogV1 "github.com/DataDog/datadog-api-client-go/v2/api/datadogV1"
	gomock "go.uber.org/mock/gomock"
)

// MockDatadogSLOAPI is a mock of DatadogSLOAPI interface.
type MockDatadogSLOAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDatadogSLOAPIMockRecorder
}

// MockDatadogSLOAPIMockRecorder is the mock recorder for MockDatadogSLOAPI.
type MockDatadogSLOAPIMockRecorder struct {
	mock *MockDatadogSLOAPI
}

// NewMockDatadogSLOAPI creates a new mock instance.
func NewMockDatadogSLOAPI(ctrl *gomock.Controller) *MockDatadogSLOAPI {
	mock := &MockDatadogSLOAPI{ctrl: ctrl}
	mock.recorder = &MockDatadogSLOAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatadogSLOAPI) EXPECT() *MockDatadogSLOAPIMockRecorder {
	return m.recorder
}

// SearchSLO mocks base method.
func (m *MockDatadogSLOAPI) SearchSLO(arg0 context.Context, arg1 ...datadogV1.SearchSLOOptionalParameters) (datadogV1.SearchSLOResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchSLO", varargs...)
	ret0, _ := ret[0].(datadogV1.SearchSLOResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchSLO indicates an expected call of SearchSLO.
func (mr *MockDatadogSLOAPIMockRecorder) SearchSLO(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSLO", reflect.TypeOf((*MockDatadogSLOAPI)(nil).SearchSLO), varargs...)
}
