// Code generated by MockGen. DO NOT EDIT.
// Source: go.medium.engineering/picchu/pkg/controller/releasemanager (interfaces: Deployment)

// Package releasemanager is a generated GoMock package.
package releasemanager

import (
	context "context"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/knative/pkg/apis/istio/v1alpha3"
	v1alpha1 "go.medium.engineering/picchu/pkg/apis/picchu/v1alpha1"
	observe "go.medium.engineering/picchu/pkg/controller/releasemanager/observe"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDeployment is a mock of Deployment interface
type MockDeployment struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentMockRecorder
}

// MockDeploymentMockRecorder is the mock recorder for MockDeployment
type MockDeploymentMockRecorder struct {
	mock *MockDeployment
}

// NewMockDeployment creates a new mock instance
func NewMockDeployment(ctrl *gomock.Controller) *MockDeployment {
	mock := &MockDeployment{ctrl: ctrl}
	mock.recorder = &MockDeploymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeployment) EXPECT() *MockDeploymentMockRecorder {
	return m.recorder
}

// Tag mocks base method
func (m *MockDeployment) Tag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockDeploymentMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockDeployment)(nil).Tag))
}

// appName mocks base method
func (m *MockDeployment) appName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "appName")
	ret0, _ := ret[0].(string)
	return ret0
}

// appName indicates an expected call of appName
func (mr *MockDeploymentMockRecorder) appName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "appName", reflect.TypeOf((*MockDeployment)(nil).appName))
}

// currentPercent mocks base method
func (m *MockDeployment) currentPercent() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "currentPercent")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// currentPercent indicates an expected call of currentPercent
func (mr *MockDeploymentMockRecorder) currentPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "currentPercent", reflect.TypeOf((*MockDeployment)(nil).currentPercent))
}

// currentPercentTarget mocks base method
func (m *MockDeployment) currentPercentTarget(arg0 uint32) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "currentPercentTarget", arg0)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// currentPercentTarget indicates an expected call of currentPercentTarget
func (mr *MockDeploymentMockRecorder) currentPercentTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "currentPercentTarget", reflect.TypeOf((*MockDeployment)(nil).currentPercentTarget), arg0)
}

// defaultLabels mocks base method
func (m *MockDeployment) defaultLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "defaultLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// defaultLabels indicates an expected call of defaultLabels
func (mr *MockDeploymentMockRecorder) defaultLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "defaultLabels", reflect.TypeOf((*MockDeployment)(nil).defaultLabels))
}

// del mocks base method
func (m *MockDeployment) del(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// del indicates an expected call of del
func (mr *MockDeploymentMockRecorder) del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "del", reflect.TypeOf((*MockDeployment)(nil).del), arg0)
}

// deleteCanaryRules mocks base method
func (m *MockDeployment) deleteCanaryRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteCanaryRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteCanaryRules indicates an expected call of deleteCanaryRules
func (mr *MockDeploymentMockRecorder) deleteCanaryRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteCanaryRules", reflect.TypeOf((*MockDeployment)(nil).deleteCanaryRules), arg0)
}

// deleteSLIRules mocks base method
func (m *MockDeployment) deleteSLIRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteSLIRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteSLIRules indicates an expected call of deleteSLIRules
func (mr *MockDeploymentMockRecorder) deleteSLIRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteSLIRules", reflect.TypeOf((*MockDeployment)(nil).deleteSLIRules), arg0)
}

// divideReplicas mocks base method
func (m *MockDeployment) divideReplicas(arg0 int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "divideReplicas", arg0)
	ret0, _ := ret[0].(int32)
	return ret0
}

// divideReplicas indicates an expected call of divideReplicas
func (mr *MockDeploymentMockRecorder) divideReplicas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "divideReplicas", reflect.TypeOf((*MockDeployment)(nil).divideReplicas), arg0)
}

// fastRelease mocks base method
func (m *MockDeployment) fastRelease() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "fastRelease")
}

// fastRelease indicates an expected call of fastRelease
func (mr *MockDeploymentMockRecorder) fastRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fastRelease", reflect.TypeOf((*MockDeployment)(nil).fastRelease))
}

// getLog mocks base method
func (m *MockDeployment) getLog() logr.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLog")
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// getLog indicates an expected call of getLog
func (mr *MockDeploymentMockRecorder) getLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLog", reflect.TypeOf((*MockDeployment)(nil).getLog))
}

// getStatus mocks base method
func (m *MockDeployment) getStatus() *v1alpha1.ReleaseManagerRevisionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStatus")
	ret0, _ := ret[0].(*v1alpha1.ReleaseManagerRevisionStatus)
	return ret0
}

// getStatus indicates an expected call of getStatus
func (mr *MockDeploymentMockRecorder) getStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStatus", reflect.TypeOf((*MockDeployment)(nil).getStatus))
}

// hasRevision mocks base method
func (m *MockDeployment) hasRevision() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasRevision")
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasRevision indicates an expected call of hasRevision
func (mr *MockDeploymentMockRecorder) hasRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasRevision", reflect.TypeOf((*MockDeployment)(nil).hasRevision))
}

// image mocks base method
func (m *MockDeployment) image() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "image")
	ret0, _ := ret[0].(string)
	return ret0
}

// image indicates an expected call of image
func (mr *MockDeploymentMockRecorder) image() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "image", reflect.TypeOf((*MockDeployment)(nil).image))
}

// isAlarmTriggered mocks base method
func (m *MockDeployment) isAlarmTriggered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isAlarmTriggered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isAlarmTriggered indicates an expected call of isAlarmTriggered
func (mr *MockDeploymentMockRecorder) isAlarmTriggered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAlarmTriggered", reflect.TypeOf((*MockDeployment)(nil).isAlarmTriggered))
}

// isCanaryPending mocks base method
func (m *MockDeployment) isCanaryPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCanaryPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCanaryPending indicates an expected call of isCanaryPending
func (mr *MockDeploymentMockRecorder) isCanaryPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCanaryPending", reflect.TypeOf((*MockDeployment)(nil).isCanaryPending))
}

// isDeployed mocks base method
func (m *MockDeployment) isDeployed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isDeployed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isDeployed indicates an expected call of isDeployed
func (mr *MockDeploymentMockRecorder) isDeployed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDeployed", reflect.TypeOf((*MockDeployment)(nil).isDeployed))
}

// isReleaseEligible mocks base method
func (m *MockDeployment) isReleaseEligible() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isReleaseEligible")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isReleaseEligible indicates an expected call of isReleaseEligible
func (mr *MockDeploymentMockRecorder) isReleaseEligible() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isReleaseEligible", reflect.TypeOf((*MockDeployment)(nil).isReleaseEligible))
}

// isTestPending mocks base method
func (m *MockDeployment) isTestPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isTestPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isTestPending indicates an expected call of isTestPending
func (mr *MockDeploymentMockRecorder) isTestPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTestPending", reflect.TypeOf((*MockDeployment)(nil).isTestPending))
}

// isTestStarted mocks base method
func (m *MockDeployment) isTestStarted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isTestStarted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isTestStarted indicates an expected call of isTestStarted
func (mr *MockDeploymentMockRecorder) isTestStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTestStarted", reflect.TypeOf((*MockDeployment)(nil).isTestStarted))
}

// listOptions mocks base method
func (m *MockDeployment) listOptions() (*client.ListOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listOptions")
	ret0, _ := ret[0].(*client.ListOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listOptions indicates an expected call of listOptions
func (mr *MockDeploymentMockRecorder) listOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listOptions", reflect.TypeOf((*MockDeployment)(nil).listOptions))
}

// peakPercent mocks base method
func (m *MockDeployment) peakPercent() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "peakPercent")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// peakPercent indicates an expected call of peakPercent
func (mr *MockDeploymentMockRecorder) peakPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "peakPercent", reflect.TypeOf((*MockDeployment)(nil).peakPercent))
}

// ports mocks base method
func (m *MockDeployment) ports() []v1alpha1.PortInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ports")
	ret0, _ := ret[0].([]v1alpha1.PortInfo)
	return ret0
}

// ports indicates an expected call of ports
func (mr *MockDeploymentMockRecorder) ports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ports", reflect.TypeOf((*MockDeployment)(nil).ports))
}

// retire mocks base method
func (m *MockDeployment) retire(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "retire", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// retire indicates an expected call of retire
func (mr *MockDeploymentMockRecorder) retire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "retire", reflect.TypeOf((*MockDeployment)(nil).retire), arg0)
}

// scale mocks base method
func (m *MockDeployment) scale(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "scale", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// scale indicates an expected call of scale
func (mr *MockDeploymentMockRecorder) scale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "scale", reflect.TypeOf((*MockDeployment)(nil).scale), arg0)
}

// schedulePermitsRelease mocks base method
func (m *MockDeployment) schedulePermitsRelease() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "schedulePermitsRelease")
	ret0, _ := ret[0].(bool)
	return ret0
}

// schedulePermitsRelease indicates an expected call of schedulePermitsRelease
func (mr *MockDeploymentMockRecorder) schedulePermitsRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "schedulePermitsRelease", reflect.TypeOf((*MockDeployment)(nil).schedulePermitsRelease))
}

// secondsSinceRevision mocks base method
func (m *MockDeployment) secondsSinceRevision() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "secondsSinceRevision")
	ret0, _ := ret[0].(float64)
	return ret0
}

// secondsSinceRevision indicates an expected call of secondsSinceRevision
func (mr *MockDeploymentMockRecorder) secondsSinceRevision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "secondsSinceRevision", reflect.TypeOf((*MockDeployment)(nil).secondsSinceRevision))
}

// setReleaseEligible mocks base method
func (m *MockDeployment) setReleaseEligible(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setReleaseEligible", arg0)
}

// setReleaseEligible indicates an expected call of setReleaseEligible
func (mr *MockDeploymentMockRecorder) setReleaseEligible(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setReleaseEligible", reflect.TypeOf((*MockDeployment)(nil).setReleaseEligible), arg0)
}

// setState mocks base method
func (m *MockDeployment) setState(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setState", arg0)
}

// setState indicates an expected call of setState
func (mr *MockDeploymentMockRecorder) setState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setState", reflect.TypeOf((*MockDeployment)(nil).setState), arg0)
}

// sync mocks base method
func (m *MockDeployment) sync(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// sync indicates an expected call of sync
func (mr *MockDeploymentMockRecorder) sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sync", reflect.TypeOf((*MockDeployment)(nil).sync), arg0)
}

// syncCanaryRules mocks base method
func (m *MockDeployment) syncCanaryRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncCanaryRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncCanaryRules indicates an expected call of syncCanaryRules
func (mr *MockDeploymentMockRecorder) syncCanaryRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncCanaryRules", reflect.TypeOf((*MockDeployment)(nil).syncCanaryRules), arg0)
}

// syncSLIRules mocks base method
func (m *MockDeployment) syncSLIRules(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncSLIRules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncSLIRules indicates an expected call of syncSLIRules
func (mr *MockDeploymentMockRecorder) syncSLIRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncSLIRules", reflect.TypeOf((*MockDeployment)(nil).syncSLIRules), arg0)
}

// taggedRoutes mocks base method
func (m *MockDeployment) taggedRoutes(arg0, arg1 string) []v1alpha3.HTTPRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "taggedRoutes", arg0, arg1)
	ret0, _ := ret[0].([]v1alpha3.HTTPRoute)
	return ret0
}

// taggedRoutes indicates an expected call of taggedRoutes
func (mr *MockDeploymentMockRecorder) taggedRoutes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "taggedRoutes", reflect.TypeOf((*MockDeployment)(nil).taggedRoutes), arg0, arg1)
}

// target mocks base method
func (m *MockDeployment) target() *v1alpha1.RevisionTarget {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "target")
	ret0, _ := ret[0].(*v1alpha1.RevisionTarget)
	return ret0
}

// target indicates an expected call of target
func (mr *MockDeploymentMockRecorder) target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "target", reflect.TypeOf((*MockDeployment)(nil).target))
}

// targetName mocks base method
func (m *MockDeployment) targetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "targetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// targetName indicates an expected call of targetName
func (mr *MockDeploymentMockRecorder) targetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "targetName", reflect.TypeOf((*MockDeployment)(nil).targetName))
}

// targetNamespace mocks base method
func (m *MockDeployment) targetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "targetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// targetNamespace indicates an expected call of targetNamespace
func (mr *MockDeploymentMockRecorder) targetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "targetNamespace", reflect.TypeOf((*MockDeployment)(nil).targetNamespace))
}

// update mocks base method
func (m *MockDeployment) update(arg0 *observe.DeploymentInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "update", arg0)
}

// update indicates an expected call of update
func (mr *MockDeploymentMockRecorder) update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "update", reflect.TypeOf((*MockDeployment)(nil).update), arg0)
}

// updateCurrentPercent mocks base method
func (m *MockDeployment) updateCurrentPercent(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updateCurrentPercent", arg0)
}

// updateCurrentPercent indicates an expected call of updateCurrentPercent
func (mr *MockDeploymentMockRecorder) updateCurrentPercent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateCurrentPercent", reflect.TypeOf((*MockDeployment)(nil).updateCurrentPercent), arg0)
}
