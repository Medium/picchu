// +build !ignore_autogenerated

// Copyright Â© 2019 A Medium Corporation.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by defaulter. DO NOT EDIT.

package v1alpha1

import (
	"reflect"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&Cluster{}, func(obj interface{}) { SetObjectDefaults_Cluster(obj.(*Cluster)) })
	scheme.AddTypeDefaultingFunc(&ClusterList{}, func(obj interface{}) { SetObjectDefaults_ClusterList(obj.(*ClusterList)) })
	scheme.AddTypeDefaultingFunc(&Revision{}, func(obj interface{}) { SetObjectDefaults_Revision(obj.(*Revision)) })
	scheme.AddTypeDefaultingFunc(&RevisionList{}, func(obj interface{}) { SetObjectDefaults_RevisionList(obj.(*RevisionList)) })
	return nil
}

func SetObjectDefaults_Cluster(in *Cluster) {
	SetDefaults_ClusterSpec(&in.Spec)
}

func SetObjectDefaults_ClusterList(in *ClusterList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Cluster(a)
	}
}

func SetObjectDefaults_Revision(in *Revision) {
	SetDefaults_RevisionSpec(&in.Spec)
	for i := range in.Spec.Targets {
		a := &in.Spec.Targets[i]
		for j := range a.Sidecars {
			b := &a.Sidecars[j]
			for k := range b.Ports {
				c := &b.Ports[k]
				if reflect.ValueOf(c.Protocol).IsZero() {
					c.Protocol = "TCP"
				}
			}
		}
	}
}

func SetObjectDefaults_RevisionList(in *RevisionList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Revision(a)
	}
}
