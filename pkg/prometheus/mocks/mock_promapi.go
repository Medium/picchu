// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/prometheus/common/model"
	reflect "reflect"
	time "time"
)

// MockPromAPI is a mock of PromAPI interface
type MockPromAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPromAPIMockRecorder
}

// MockPromAPIMockRecorder is the mock recorder for MockPromAPI
type MockPromAPIMockRecorder struct {
	mock *MockPromAPI
}

// NewMockPromAPI creates a new mock instance
func NewMockPromAPI(ctrl *gomock.Controller) *MockPromAPI {
	mock := &MockPromAPI{ctrl: ctrl}
	mock.recorder = &MockPromAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPromAPI) EXPECT() *MockPromAPIMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockPromAPI) Query(arg0 context.Context, arg1 string, arg2 time.Time) (model.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockPromAPIMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPromAPI)(nil).Query), arg0, arg1, arg2)
}
