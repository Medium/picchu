// Copyright Â© 2019 A Medium Corporation.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by informer. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	picchuv1alpha1 "go.medium.engineering/picchu/pkg/apis/picchu/v1alpha1"
	client "go.medium.engineering/picchu/pkg/client"
	internalinterfaces "go.medium.engineering/picchu/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "go.medium.engineering/picchu/pkg/client/listers/picchu/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// IncarnationInformer provides access to a shared informer and lister for
// Incarnations.
type IncarnationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.IncarnationLister
}

type incarnationInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewIncarnationInformer constructs a new informer for Incarnation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewIncarnationInformer(client client.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredIncarnationInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredIncarnationInformer constructs a new informer for Incarnation type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredIncarnationInformer(client client.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PicchuV1alpha1().Incarnations(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.PicchuV1alpha1().Incarnations(namespace).Watch(options)
			},
		},
		&picchuv1alpha1.Incarnation{},
		resyncPeriod,
		indexers,
	)
}

func (f *incarnationInformer) defaultInformer(client client.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredIncarnationInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *incarnationInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&picchuv1alpha1.Incarnation{}, f.defaultInformer)
}

func (f *incarnationInformer) Lister() v1alpha1.IncarnationLister {
	return v1alpha1.NewIncarnationLister(f.Informer().GetIndexer())
}
