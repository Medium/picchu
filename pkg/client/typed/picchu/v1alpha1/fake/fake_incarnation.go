// Copyright Â© 2019 A Medium Corporation.
// Licensed under the Apache License, Version 2.0; see the LICENSE file.

// Code generated by client. DO NOT EDIT.

package fake

import (
	v1alpha1 "go.medium.engineering/picchu/pkg/apis/picchu/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIncarnations implements IncarnationInterface
type FakeIncarnations struct {
	Fake *FakePicchuV1alpha1
	ns   string
}

var incarnationsResource = schema.GroupVersionResource{Group: "picchu.medium.engineering", Version: "v1alpha1", Resource: "incarnations"}

var incarnationsKind = schema.GroupVersionKind{Group: "picchu.medium.engineering", Version: "v1alpha1", Kind: "Incarnation"}

// Get takes name of the incarnation, and returns the corresponding incarnation object, and an error if there is any.
func (c *FakeIncarnations) Get(name string, options v1.GetOptions) (result *v1alpha1.Incarnation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(incarnationsResource, c.ns, name), &v1alpha1.Incarnation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Incarnation), err
}

// List takes label and field selectors, and returns the list of Incarnations that match those selectors.
func (c *FakeIncarnations) List(opts v1.ListOptions) (result *v1alpha1.IncarnationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(incarnationsResource, incarnationsKind, c.ns, opts), &v1alpha1.IncarnationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.IncarnationList{ListMeta: obj.(*v1alpha1.IncarnationList).ListMeta}
	for _, item := range obj.(*v1alpha1.IncarnationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested incarnations.
func (c *FakeIncarnations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(incarnationsResource, c.ns, opts))

}

// Create takes the representation of a incarnation and creates it.  Returns the server's representation of the incarnation, and an error, if there is any.
func (c *FakeIncarnations) Create(incarnation *v1alpha1.Incarnation) (result *v1alpha1.Incarnation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(incarnationsResource, c.ns, incarnation), &v1alpha1.Incarnation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Incarnation), err
}

// Update takes the representation of a incarnation and updates it. Returns the server's representation of the incarnation, and an error, if there is any.
func (c *FakeIncarnations) Update(incarnation *v1alpha1.Incarnation) (result *v1alpha1.Incarnation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(incarnationsResource, c.ns, incarnation), &v1alpha1.Incarnation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Incarnation), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIncarnations) UpdateStatus(incarnation *v1alpha1.Incarnation) (*v1alpha1.Incarnation, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(incarnationsResource, "status", c.ns, incarnation), &v1alpha1.Incarnation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Incarnation), err
}

// Delete takes name of the incarnation and deletes it. Returns an error if one occurs.
func (c *FakeIncarnations) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(incarnationsResource, c.ns, name), &v1alpha1.Incarnation{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIncarnations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(incarnationsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.IncarnationList{})
	return err
}

// Patch applies the patch and returns the patched incarnation.
func (c *FakeIncarnations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Incarnation, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(incarnationsResource, c.ns, name, pt, data, subresources...), &v1alpha1.Incarnation{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Incarnation), err
}
