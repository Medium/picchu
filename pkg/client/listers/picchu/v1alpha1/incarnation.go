// Copyright Â© 2019 A Medium Corporation.
// Licensed under the Apache License, Version 2.0; see the NOTICE file.

// Code generated by lister. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.medium.engineering/picchu/pkg/apis/picchu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IncarnationLister helps list Incarnations.
type IncarnationLister interface {
	// List lists all Incarnations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Incarnation, err error)
	// Incarnations returns an object that can list and get Incarnations.
	Incarnations(namespace string) IncarnationNamespaceLister
	IncarnationListerExpansion
}

// incarnationLister implements the IncarnationLister interface.
type incarnationLister struct {
	indexer cache.Indexer
}

// NewIncarnationLister returns a new IncarnationLister.
func NewIncarnationLister(indexer cache.Indexer) IncarnationLister {
	return &incarnationLister{indexer: indexer}
}

// List lists all Incarnations in the indexer.
func (s *incarnationLister) List(selector labels.Selector) (ret []*v1alpha1.Incarnation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Incarnation))
	})
	return ret, err
}

// Incarnations returns an object that can list and get Incarnations.
func (s *incarnationLister) Incarnations(namespace string) IncarnationNamespaceLister {
	return incarnationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IncarnationNamespaceLister helps list and get Incarnations.
type IncarnationNamespaceLister interface {
	// List lists all Incarnations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Incarnation, err error)
	// Get retrieves the Incarnation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Incarnation, error)
	IncarnationNamespaceListerExpansion
}

// incarnationNamespaceLister implements the IncarnationNamespaceLister
// interface.
type incarnationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Incarnations in the indexer for a given namespace.
func (s incarnationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Incarnation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Incarnation))
	})
	return ret, err
}

// Get retrieves the Incarnation from the indexer for a given namespace and name.
func (s incarnationNamespaceLister) Get(name string) (*v1alpha1.Incarnation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("incarnation"), name)
	}
	return obj.(*v1alpha1.Incarnation), nil
}
